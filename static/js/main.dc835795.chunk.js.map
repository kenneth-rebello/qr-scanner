{"version":3,"sources":["components/Scanner.js","components/Home.js","components/Generator.js","App.js","serviceWorker.js","index.js"],"names":["Scanner","useState","result","setResult","className","delay","onError","err","alert","onScan","data","style","width","Home","to","Generator","text","setText","type","onChange","e","target","value","Changer","placeholder","id","size","level","includeMargin","onClick","pngURL","document","getElementById","toDataURL","replace","downloadLink","href","download","click","display","App","basename","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc835795.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport QrReader from 'react-qr-reader';\r\n\r\nconst Scanner = () => {\r\n\r\n    const [result, setResult] = useState('No image detected')\r\n\r\n    const handleScan = data => {\r\n        if (data) {\r\n            setResult(data)\r\n        }\r\n    }\r\n\r\n    const handleError = err => {\r\n        alert(err)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"container\">\r\n                <QrReader\r\n                    delay={300}\r\n                    onError={handleError}\r\n                    onScan={handleScan}\r\n                    style={{ width: '100%' }}\r\n                />\r\n            </div>\r\n            <p>{result}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scanner;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home\">\r\n            <h1 className=\"title\">QR Code App</h1>\r\n            <div className=\"btn-box\">\r\n                <button className=\"btn\">\r\n                    <Link to=\"/scanner\">Open QR Scanner</Link>\r\n                </button>\r\n                <button className=\"btn\">\r\n                    <Link to=\"/generator\">Open QR Generator</Link>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useState } from 'react'\r\nimport QRCode from 'qrcode.react'\r\n\r\nconst Generator = () => {\r\n\r\n    const [text, setText] = useState('No text entered yet');\r\n\r\n    const Changer = e => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    const downloadQR = () => {\r\n        const canvas  = document.getElementById('qrcode');\r\n        const pngURL = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        let downloadLink = document.getElementById('download-link');\r\n        downloadLink.href = pngURL;\r\n        downloadLink.download = `${text}.png`;\r\n        downloadLink.click();\r\n        setText('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"input-box\">\r\n                <input type=\"text\" onChange={e => Changer(e)} value={text === \"No text entered yet\" ? '' : text}\r\n                    placeholder=\"Enter text to convert to QRCode here\" />\r\n            </div>\r\n            <QRCode\r\n                id=\"qrcode\"\r\n                value={text}\r\n                size={300}\r\n                level={\"H\"}\r\n                includeMargin={true}\r\n            />\r\n            <button className=\"btn\" onClick={downloadQR} >Download QR Code</button>\r\n            <a id=\"download-link\" style={{display:'none'}} href=\"/generator\">Hidden Anchor</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Generator;","import React from 'react';\nimport './App.css';\nimport {HashRouter as Router, Route, Link} from 'react-router-dom';\nimport Scanner from './components/Scanner';\nimport Home from './components/Home';\nimport Generator from './components/Generator';\n\nconst App = () => {\n\n  return (\n    <Router basename=\"/\">\n      <div>\n        <ul>\n          <li><Link to=\"/scanner\">QR Scanner</Link></li>\n          <li><Link to=\"/generator\">QR Generator</Link></li>\n        </ul>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/scanner\" component={Scanner}/>\n        <Route exact path=\"/generator\" component={Generator}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}